// Agent mySupermarket in project DomesticRobot.mas2j

/* Initial beliefs and rules */

// Identificador de la última orden entregada
last_order_id(1).

//Producto, stock, precio
stock(beer,mahou,math.round(math.random(50))+50,math.round(math.random(9))+1).
stock(beer,estrella,math.round(math.random(50))+50,math.round(math.random(9))+1).
stock(beer,heineken,math.round(math.random(50))+50,math.round(math.random(9))+1).
stock(pincho,tortilla,math.round(math.random(25))+25,math.round(math.random(9))+1).
stock(pincho,empanada,math.round(math.random(25))+25,math.round(math.random(9))+1).


//Precio de adquisción
cost(beer,mahou,2).
cost(beer,estrella,2).
cost(beer,heineken,2).
cost(pincho,tortilla,3).
//Saldo inicial del súper
wallet(math.round(math.random(1000))+500).




/* Initial goals */

//!send_price.

/* Plans */

+!send_price(Product, Brand)[source(Ag)]<-
	/*?stock(Product,Brand,S,P);
	.send(Ag,untell,s3price(mySupermarket3,Product,Brand,P));
	?cost(Product,Brand,C);
	-stock(Product,Brand,_,_);
	+stock(Product,Brand,S,math.round(math.random(10))+C);*/
	?stock(Product,Brand,_,Price);
	.send(Ag,tell,s3price(mySupermarket3,Product,Brand,Price)).

	
	
+!order(pincho, Brand, Qtd, M)[source(Ag)]: stock(pincho, Brand, A, Price) &  A >= Qtd & Qtd*Price <= M <- 
	-stock(pincho, Brand,_,Price); //elimino la creencia de stock del producto  (ya que si tengo otro producto tb en la creencia stock actualiza el primero sea cual sea el producto)
	+stock(pincho, Brand,A-Qtd,Price); //añado la creencia ya actualizada
	?stock(pincho, Brand,X,Price);
	.println(" tengo un stock de ", X, picnho, Brand);
	.println(" cada ",Brand," cuesta ", Price);
	 deliverP(pincho, Qtd);
	.send(Ag,achieve, delivered(pincho, Brand, Qtd,OrderId, Qtd*Price));
	+orderFrom(Ag, Qtd);
	.println("Pedido de ", Qtd," ",Brand, " recibido de ", Ag);
	-wallet(Pro);
	+wallet(Pro+Qtd*Price);
	?wallet(Y);
	.println("el saldo actual es de", Y).

	
+!order(Product, Brand, Qtd, M)[source(Ag)]: stock(Product, Brand, A, Price) &  A >= Qtd & Qtd*Price <= M <- 
	-stock(Product, Brand,_,Price); //elimino la creencia de stock del producto  (ya que si tengo otro producto tb en la creencia stock actualiza el primero sea cual sea el producto)
	+stock(Product, Brand,A-Qtd,Price); //añado la creencia ya actualizada
	?stock(Product, Brand,X,Price);
	.println(" tengo un stock de ", X, Product, Brand);
	.println(" cada ",Brand," cuesta ", Price);
	 deliver(Product, Qtd);
	.send(Ag,achieve, delivered(Product, Brand, Qtd,OrderId, Qtd*Price));
	+orderFrom(Ag, Qtd);
	.println("Pedido de ", Qtd," ",Brand, " recibido de ", Ag);
	-wallet(Pro);
	+wallet(Pro+Qtd*Price);
	?wallet(Y);
	.println("el saldo actual es de", Y).
	
//plan para cuando no hay suficiente stock de Product
+!order(Product, Brand, Qtd,M)[source(Ag)]: stock(Product, Brand, A, Price) &  A < Qtd <- 
	?stock(Product, Brand,X,Price);
	.print("Sólo me quedan", X , " ", Product," ",Brand);
	.print("Voy hacer restock de ", Product," ",Brand);
	.send(myProvider, achieve, supply(mySupermarket3, Product, Brand, Qtd*2 ));
	.wait(100);
	!order(Product, Brand, Qtd, M)[source(Ag)].

+!restock(Product, Brand, Qtd,Cost)<-
	-stock(Product, Brand,X,Price);
	+stock(Product, Brand,X+Qtd,Price);
	-wallet(Pro);
	+wallet(Pro-Cost);
	?stock(Product, Brand,Y,Price);
	.wait(10);
	?wallet(Z);
	.println("Ahora el stock de ",Product, Brand," es de ", Y);
	.println("Ahora el saldo es de ", Z).
	
	
+!order(Product, Brand, Qtd,M)[source(Ag)]: stock(Product, Brand, A, Price) & Qtd*Price > M<-
	?stock(Product, Brand,_,Price);
	.println(Ag, " no tiene suficiente dinero para comprar");
	.send(Ag, achieve, notEnoughM(Qtd, Price));
	.send(Ag, askOne, wallet(N));
	!order(Product, Brand, Qtd, N)[source(Ag)].



